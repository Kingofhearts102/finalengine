{"library":{"textured":{"class":"Material","data":{"defines":[],"parameters":{"WorldViewProjectionMatrix":{"type":"Matrix4","data":[-0.061140529811382,0,-0.98909598588943,-0.98889815807343,0,1.9209821224213,0,0,-0.40812915563583,0,0.14817333221436,0.14814369380474,0,-1.9209821224213,2.8005800247192,3]},"texture":{"type":"Texture","data":{"width":2048,"height":2048,"minFilter":6,"maxFilter":2,"type":1,"wrapS":1,"wrapT":1,"origin":2,"source":"http:\/\/localhost\/tests\/demo-app\/woman.jpg"}},"WorldViewMatrix":{"type":"Matrix4","data":[-0.14814369380474,0,0.98889815807343,0,0,1,0,0,-0.98889815807343,0,-0.14814369380474,0,0,-1,-3,1]}},"engineParameters":{"WorldViewProjectionMatrix":null,"WorldViewMatrix":null},"shader":"texturedShader","name":"textured","vertexShader":"attribute vec3 Position;attribute vec3 Normal;attribute vec2 UVCoord;varying vec2 fragUVCoord;varying vec4 position;varying vec4 projectedPosition;varying vec3 N;uniform mat4 WorldViewProjectionMatrix;uniform mat4 WorldViewMatrix;void main() {position = WorldViewMatrix * vec4( Position, 1.0 );    gl_Position = WorldViewProjectionMatrix * vec4( Position, 1.0 );    fragUVCoord = UVCoord;        mat3 foo = mat3( WorldViewMatrix[ 0 ].xyz, WorldViewMatrix[ 1 ].xyz, WorldViewMatrix[ 2 ].xyz );    N = foo * Normal;}","fragmentShader":"precision highp float;varying vec2 fragUVCoord;varying vec4 position;varying vec4 projectedPosition;varying vec3 N;uniform sampler2D texture; void main() { vec3 lightColor = texture2D( texture, fragUVCoord ).xyz; vec3 normal = normalize( N );vec3 L = normalize( position.xyz );vec3 eye = normalize( position.xyz - vec3( 0.0, 0.0, 5.0 ) );    float fogGradientHeight = 20.0;    vec3 fogColor = vec3(        clamp( position.y \/ fogGradientHeight, 0.0, 1.0 ) * 0.0 \/ 255.0,        clamp( position.y \/ fogGradientHeight, 0.0, 1.0 ) * 0.0 \/ 255.0,        clamp( position.y \/ fogGradientHeight, 0.0, 1.0 ) * 0.0 \/ 255.0    ) + vec3(        clamp( 1.0 - position.y \/ fogGradientHeight, 0.0, 1.0 ) * 0.0 \/ 255.0,        clamp( 1.0 - position.y \/ fogGradientHeight, 0.0, 1.0 ) * 0.0 \/ 255.0,        clamp( 1.0 - position.y \/ fogGradientHeight, 0.0, 1.0 ) * 0.0 \/ 255.0    );    float fogPortion = -position.z \/70.0;    fogPortion = clamp( fogPortion, 0.0, 1.0 );float diffuse = max( dot( -normal, L ), 0.0 );vec3 diffuseResult = diffuse * lightColor;    gl_FragColor = vec4( diffuseResult * ( 1.0 - fogPortion ) + fogColor * fogPortion, 1.0 );}"}}},"object":"textured"}