Buffer

A Buffer represents a continuous space of data. The data it contains depend on the type of the buffer. A buffer can be either a DATA_BUFFER or an ELEMENT_BUFFER. A DATA_BUFFER can only contain 32bit Floats and an ELEMENT_BUFFER can only contain 16bit Unsigned Integers. The semantics of the data in a buffer are not specified in this class, as a buffer can contain many types of data. For example, if mesh data is interleaved.

VertexBuffer

A VertexBuffer represents a source from which the data for a vertex attribute are derived. For example, a vertex that has 2 attributes, position and normal vector, would need two VertexBuffer objects. These two objects could reference two different Buffer objects, or even same, if the data is interleaved in it. The VertexBuffer references a Buffer object, the way to access the Buffer object and a description of the data it describes.

Mesh

A Mesh is responsible for specifying how a set of vertices are connected together to form a 3D object. A Mesh object has a collection of VertexBuffer objects. Each of those specify a different attribute for the set of vertices. In order to specify how these vertices are connected an index Buffer and a Mode are used. An index Buffer contains integers. Each of those integers reference a vertex. The mode specifies what primitives are formed if one followes the vertices indexed by the index buffer. For example if the index buffer contains the numbers [ 0, 1, 2, 3, 4, 5 ] then if the Mode is TRIAGLES then the Mesh would consist of two triangles. The first one is formed by the vertices 0, 1, 2 and the second from the vertices 3, 4, 5. If the mode is POINTS then the Mesh would consist of six points in space.

Shader

A Shader object represents a procedure that will convert a Mesh to an image. A Shader object takes two inputs. A vertex shader source and a fragment shader source. These sources must be written in GLSL. A Shader will have some attributes as input. The names of the attributes serve as the semantic of those attributes. It is therefor a good practice to give consistent and meaningfull names in all your shader code-base. The attributes specified in the shader are required inputs in order for the shader to work and must match the set of VertexBuffer objects a Mesh has. For example a shader with two attributes per vertex, Position and Normal, will be unable to render a Mesh that only has a VertexBuffer for Position, or a Mesh that has a 'Position' VertexBuffer and a 'normal' VertexBuffer'. The semantics must match and are case-sensitive. Besides the attributes that are set automatically depending on the semantics a shader can have a number of uniform inputs.

Texture

A Texture object represents an image and the ways this image is used. A Texture object can have as source an ImageElement or a CanvasElement or a Video Element. This is the data the texture contains.

Renderer

A Renderer object has one and only functionality. To render Meshes using a Shader. It takes care all of the GPU data uploading and underlying API stuff.
